#!/bin/env/python
#! -*- coding: utf-8 -*-

'''
# Moments_cumulants.py

Goal : Veryfies that moment and cumulant functions are working as intended.
For
- uint histograms
- float hitograms

It calculates moment, centered moments and cumulant up to 3dr order and prints the resuts.
The input is a normal funciton generated by numpy random package.
'''
import os, sys
currentdir = os.getcwd();
parentdir = os.path.abspath(os.path.join(currentdir, os.pardir)) ;
sys.path.append(parentdir)

execfile("../common_header.py");
from Histograms import *

## Script specific imports
import scipy

## Experiment parameters
l_data= 1<<24;

## Instanciate TimeQuad object
mean = 0 ;
std_dev = 1.0;
max = 6*std_dev;
data_1 = array(normal(mean,std_dev,l_data), dtype = 'float64');
data_2 = array(normal(mean,std_dev,l_data), dtype = 'float64');

## Homemade histograms
nofbins = 2**12;
H = Histogram2D_uint64_t(nofbins , 2);

H.accumulate(data_1 , data_2, max = max)


## Moments , centered moments and cumulants up to order 3
### float histogram
m_10 = H.moment2D_float( 1,0, max = max);
m_01 = H.moment2D_float( 0,1, max = max);
m_20 = H.moment2D_float( 2,0, max = max);
m_02 = H.moment2D_float( 0,2, max = max);

c_ii = H.cumulant_ii_float( max = max );
c_jj = H.cumulant_jj_float( max = max );
c_iijj = H.cumulant_iijj_float(  max = max );

# bin_width = 2*max/nofbins;
# data_float = bin_width*floor(data_float/bin_width)

m_10_py = scipy.stats.moment(data_1,1)
m_01_py = scipy.stats.moment(data_2,1)
m_20_py = scipy.stats.moment(data_1,2)
m_02_py = scipy.stats.moment(data_2,2)

print " m_10\t=\t{} \n m_01\t=\t{} \n m_20\t=\t{} \n m_02\t=\t{}".format(m_10,m_01,m_20,m_02)
print "c_ii\t=\t{} \n c_jj\t=\t{} \n c_iijj\t=\t{} ".format(c_ii,c_jj,c_iijj)
print "\n m_10_py\t=\t{} \n m_01_py\t=\t{} \n m_20_py\t=\t{} \n m_02_py\t=\t{}".format(m_10_py,m_01_py,m_20_py,m_02_py)


